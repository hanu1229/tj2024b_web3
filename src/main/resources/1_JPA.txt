[ DB ]
    01. 데이터베이스 : 데이터들의 집합
    02. 데이터베이스 종류 : 관계형 데이터베이스(SQL)=Oracle/mysql, nosql = mongoDB

[ JDBC ]
    01. Java DataBase Connection : 자바에서 데이터베이스를 연동하는 기술(인터페이스/클래스) 제공
    02. 주요 인터페이스 : Connection, PreparedStatement, ResultSet

[ MyBatis ]
    01. SQL Mapper 프레임워크 : SQL을 자동으로 매핑하는 기술을 지원

[ ORM ]
    01. Object Relatonal Mapping : 객체 관계 매핑
    02. 정의 : 객체지향 프로그램에서 사용하는 객체와 (DB)관계형데이터베이스에서 사용하는 테이블과 매핑(연결)하는 기술
    03. 목적 : 개발자에게 편리성 제공
    04. 사용처 : Java, Python, C# 등등


[ Hibernate ]
    01. 정의 : 자바에서 ORM을 구현한 프레임워크(ORM을 사용할수 있는 라이브러리)
    02. 목적 : 자바 개발자가 SQL없이 데이터베이스 테이블을 다룬다.
            - SQL 쿼르를 자동으로 생성하므로 개발자가 직접 SQL을 작성하지 않아도 된다(빠른 개발)
                --> 간단한 쿼리는 지원, 복잡한 쿼르는 직접 작성
            - 자동으로 타입 변환
            - 간결한 코드 제공
            - 등등

[ JPA ]
    01. Java Persistence Api
    02. 정의 : 자바에서 ORM을 사용할 때 사용하는 표준 API
                자바에서 ORM을 어떻게 처리할지 정의한 라이브러리(인터페이스/어노테이션/클래스)
    03. 사용법
        03-1. 그레이들에 라이브러리 추가
            implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        03-2. application.properties 설정 (JDBC 별도)
    04. JPA 설정
        04-1. JPA DDL 자동 처리 설정
            spring.jpa.hibernate.ddl-auto = create/update/none/create-drop/validate
            - 서버가 실행될때마다 기존 테이블을 삭제하고 새로운 테이블을 생성 [ 개발단계 ]
                spring.jpa.hibernate.ddl-auto = create
            - 서버가 실행될때마다 기존 테이블을 유지하고 변경/추가 사항이 있을 경우 수정/ 생성 [ 배포단계 ]
                spring.jpa.hibernate.ddl-auto = update
            - 개발자가 직접 DDL을 관리(기본값)
                spring.jpa.hibernate.ddl-auto = none
            - 서버가 종료될때마다 테이블 삭제
                spring.jpa.hibernate.ddl-auto = create-drop
            - 서버가 실행 될때마다 엔티티 일치 여부를 검사
                spring.jpa.hibernate.ddl-auto = validate
        04-2. 콘솔에서 JPA가 자동으로 처리하는 SQL 확인
            - JPA가 처리한 SQL을 콘솔에 표시
                spring.jpa.show-sql = true
            - SQL을 콘솔 형식에 맞게 변환
                spring.jpa.properties.hibernate.format_sql = true
            - JPA가 처리한 SQL 디버그 콘솔 표시
                logging.level.org.hibernate.SQL = DEBUG
            - JPA가 처리한 SQL 매개변수 콘솔 표시
                logging.level.org.hibernate.orm.jdbc.bind = TRACE

[ JPA 어노테이션 ]
    01. 용어/관점
        entity : DB테이블과 매핑된 객체(인스턴스)
        클래스     ←----→ DB의 테이블
        인스턴스   ←----→ 테이블의 레코드
            예시 : 학생 클래스                 학생 테이블
                  class 학생 {               create table 학생(
                    int 학번                      학번 int
                    String 이름                   이름 varchar(255)
                  }                         )
                  학생 인스턴스1              학생 레코드1
                  new 학생(1, "유재석");      insert into 학생 value(1, "유재석");

    02. 핵심
        02-1. @Entity
                해당 클래스를 테이블과 매핑 정의

        02-2. @Id
                엔티티의 기본키(primary key)를 지정
                모든 엔티티/테이블은 1개 이상의 pk를 갖음
                JPA는 엔티티에 @Id가 없으면 실행조차 안됨

        02-3. @Column(nullable, unique, columnDefinition, name, length, insertable, updateable)
                엔티티의 속성을 매핑
                    java            mysql
                    int             int         정수
                    String          varchar     문자열
                    double          float       실수
                    long            bigint
                    LocalDate       date
                    LocalDateTime   datetime

                - nullable = true/false : not null 제약 조건
                    nullable = true : 기본값
                    nullable = false
                - unique = true/false : unique 제약조건
                    unique = false : 기본값
                    unique = true
                - columnDefinition = "DB type" : DB type 직접 정의
                - name = "필드명" : 필드명 정의 | 생략 시 자바 변수명으로 대체
                - length = 길이 : 길이가 존재하는 필드의 길이 정의
                - insertable = true/false : insert할때 적용할 필드 설정
                - updateable = true/false : update할때 적용할 필드 설정

        02-4. @Table( name = "생성할 테이블명" )

        02-5. @GeneratedValue(strategy = GenerationType.IDENTITY)
                auto_increment 지원
                @Id와 같이 사용

[ JPA Repository ]
    01. 정의 : 기본적인 CRUD작업을 자동으로 제공 | 추가적인 쿼리 가능

    02. 사용법
        - 인터페이스 생성
        - 해당 인터페이스 위에 @Repository로 스프링 컨테이너에 빈 등록
        - 해당 인터페이스에 extends JpaRepository<조작할 클래스명, 조작할 클래스의 PK의 타입>

    03. CRUD 메소드
        1. .save(저장할엔티티객체);
            - 존재하지 않는 PK이면 insert, 존재하는 PK이면 update
            - 반환값 : insert/update 이후 영속(연결/매핑)된 객치(엔티티)
        2. .findAll();
            - 모든 엔티티를 select한다
            - 반환값 : 리스트타입으로 반환
        3. .findById(조회할 PK값)
            - pk값과 일치하는 엔티티를 select 한다.
            - 반환값 : Optional<엔티티>
        4. .deleteById(삭제할pk값)
            - pk값과 일치하는 엔티티를 delete 한다.
            - 반환값 : void
        5. .count()
            - 레코드(엔티티) 전체 개수 반환
            - 반환값 : long
        6. .existsById(조회할 pk값)
            - pk값과 일치하는 엔티티가 존재하면 true 아니면 false

        Optional클래스 : null과 관련된 메소드를 제공하는 클래스
            -> nullPointerException을 방지하고자 객체를 포장하는 클래스
            주요 메소드
                1. .isPresent(); | null 이면 false, 객체가 있으면 true
                2. .get(); | 객체를 반환
                3. .orElse(null일때 값); | 객체를 반환하는데 null이면 지정된 값을 반환
                4. .orElseThrow(예외객체); | 객체를 반환하는데 null이면 예외 처리(발생)

[ JPA Auditing ]
    01. 정의 : 엔티티의 생성/수정의 변화를 기록하는 걸 자동으로 감사하는 기능
    02. 목적 : SQL의 insert/update를 계속 주시하여 기록
    03. 사용처 : BaseTime 상속 클래스(엔티티들의 생성/수정 필드 보유)
    04. 사용법
        04-1. AppStart클래스 위에 '@EnableJpaAuditing' 작성
        04-2. Entity 클래스에 상속할 클래스 생성
                클래스 위에 '@MappedSuperclass' 작성
                    └── 일반 엔티티가 아닌 상속(공통엔티티) 목적으로 사용하는 엔티티 클래스
                클래스 위에 '@EntityListeners(AuditingEntityListener.class)' 작성
                    └── JpaAuditing 대상으로 활성화하여 계속 주시
                멤버변수 위에 '@CreatedDate' 작성
                    └── 자동으로 생성 날짜 기록
                멤버변수 위에 '@LastModifiedDate' 작성
                    └── 자동으로 수정 날짜 기록

[ JPA entity 와 DTO/VO 변환]
일반적인 흐름도

view        <---HTTP [ JS0N  <---변환----> DTO ]--->  Controller  <----- JPA[ DTO <--변환--> entity ]-----> Service --entity--> Repository --> DB
1. react            @RequestBody                                                 doEntity()
2. flutter          @ResponseBody                                                doDto()
3. jsp
4. 타임리프
5. 머스테치

[ JPA 영속성 : Persistence ]
    01. 정의 : 자바객체를 데이터베이스와 연관지어 생명주기를 관리하며 동기화하는 기능
    02. 영속성 컨텍스트 : 영속된 객체들을 관리하는 메모리 공간
    03. 영속성 매니저 : 영속된 객체들을 저장/조회/수정/삭제 가능
        주요 메소드
            .persist(비영속객체) : 영속성 부여
            .detach(영속객체)   : 영속성 해제
            .remove(영속객체)   : 영속성 삭제(레코드도 삭제됨)
            .merge(준영속성객체) : 영속성 연결

[ JPA 단방향, 양방향 ]
    01. 정의 : 여러 엔티티들 간의 참조 관계
    02. 단방향 : 한 엔티티가 다른 엔티티로만 참조
    03. 양방향 : 서로가 서로를 참조
    04. 사용법
        04-1. @ManyToOne

        04-2. @OneToMany(mappedBy = 단방향의멤버변수명)
