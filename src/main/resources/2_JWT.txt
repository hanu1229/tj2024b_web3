※ 인증 방식
    방법01. 세션(HTTP Session) 방식
                웹서버(톰캣)에 저장 및 관리
                웹서버 메모리 부하
                만료 여부는 웹서버에서 관리
                보안 유리
                작은규모의 개발에서 주로 사용

    방법02. 토큰(JWT) 방식
                클라이언트(브라우저)에 저장 및 관리
                토큰 유출 시 안전성 보장해야 함
                만료여부는 클라이언트가 관리
                보안 취약
                큰규모의 개발에서 주로 사용

[ JWT ] : JSON WEB TOKEN
    01. 정의 : JSON형식의 데이터를 안전하게 사용하기 위한 토큰 기반의 인증 방식
    02. 목적 : 주로 웹/앱에서 인증과 권한을 부여/확인에서 사용
    03. 장점
            03-1. 무상태 : 서버가 직접 관리하지 않기 때문에 클라이언트에서 확장성이 좋다.
            03-2. 보안 : 인증(서명)된 토큰의 무결성을 보장하고 중간 공격(해킹)을 방지 (알고리즘이 추가됨)
            03-3. HTTP 지원 : HTTP에서 헤더 정보에 토큰의 정보를 담을 수 있어서 통신이 가능하다. (HTTPS를 권장)
                                - HTTP : 문자 이동 규약 )
                                - HTTPS : (SSL/TLS 프로토콜 기반의 암호화된 HTTP)

    04. 구조
        - 헤더.페이로드.서명
        04-1. 헤더         : 알고리즘 정보, JWT타입 {"alg" : "HS256", "typ" : "JWT"}
        04-2. 페이로드      : 실제 정보/값, 발급 시간 {"sub" : "유재석", "iat" : 발급시간, "name" : 발급자}
        04-3. 서명         : 헤더와 페이로드를 성명하는 알고리즘(비밀키를 이용하여 사용한다)
                            - 비밀키 : 개발자/임의의 값으로 비밀키를 정의한다.

    05. JWT 라이브러리
        - build.gradle에 추가
            implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
            implementation 'io.jsonwebtoken:jjwt:0.12.6'
            runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
        - 토큰 생성/검증 클래스 만들기


[ 암호화 관련 용어 ]
    01. Base64 : 이진 데이터를 텍스트 문자열로 인코딩(변환)해주는 방식
        --> 목적 : 이미지 / 파일 / 암호화된 정보들을 아스키(문자열) 형식으로 반환
        --> 사용하는 이유 : 이진테이터를 텍스트로 변환, 일부 프로토콜 제약, 보안/암호화 과정
        --> 예시 : 안녕하세요 ==> 7JWI64WV7ZWY7IS47JqU

    02. HS256(SHA-256 기반) : 대칭키 암호화 방식 | SHA-256 해시 알고리즘 사용
        --> 목적 : 비밀키를 이용하여 데이터를 해싱(암호화)하고 그 결과를 서명으로 사용하여 무결성을 검증
        --> 256(bit) / 32(byte)를 이용하여 해시 결과를 생성
        --> 관례적으로 Token에서 서명할 때 주로 사용

    03. HS512(SHA-512 기반) : 대칭키 암호화 방식 | SHA-512 해시 알고리즘 사용
        --> 목적 : 비밀키를 이용하여 데이터를 해싱(암호화)하고 그 결과를 서명으로 사용하여 무결성을 검증
        --> 512(bit) / 64(byte)를 이용하여 해시 결과를 생성
        --> HS256 기준 더 복잡하고 긴 암호화 | 느림 | 높은 보안

    04. 해시 알고리즘 : 입력값(데이터)을 고정된 크기의 출력값(해시)으로 변환하는 함수

